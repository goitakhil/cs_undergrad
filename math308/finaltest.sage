#!/usr/bin/sage
# vi:syntax=python

load('ecclib.sage')

p = 99273847234173462737183874619283764198237461892737649891236491287634176481899
q = 82349587234957203948750293847509870298347576782350986234985623948753947562413

R = 8175160342960382514143756174306125272959949976062829084098871211710847870023173168383929427973469971434753812590132875589484666959010741925450403067262287
gR = 198908472122357497174044386010961998293330831623109935381113206903843968272672995294644492558623102997845726566995982481690438567396476173885933653419050215131931263217951055821402115359377139305184797000778745441991437594248550054549204588345917431999366138729825457823120268903379748973628357414404903100
n = 1237
m = 190064522270514601180048879761485110737847245738493082959155869490981059416571932448075820698700491304327929508641270245236942915652898009323503296961452994572306186842051857704848262210819546207541172235182277374643394693938388168534486518532638968975950506045799265276417265839769493360411251789673884773

Message = ASCIIPad("This is a test message.",R)
D = Message[0]^2 - 4 % R

X = LUCexp([Message[0],1],n,[D,R])[0]
print(X)

# Insert cyptotext here:
#X = 
def decrypt(X, R, m):
	E = (X^2-4) % R
	pointdecryption = [X,1]
	lucgpdecryption = [E,R]
	decryptedPoint = LUCexp(pointdecryption,m,lucgpdecryption)
	MTest = decryptedPoint[0]
	return(ASCIIDepad(MTest))
print(decrypt(X, R, m))



