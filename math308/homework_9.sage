#!/usr/bin/sage
# vi:syntax=python
import sys
load('ecclib.sage')


R = 1870831237023848556753949361988389424853424958053537665947923964364906734646614463
na = 71
nb = 73

Xa1 = [1013955055157379597481297301134443627550654549408802249055094158048737183652950710,1196963820318394254589775954353291172556710322349763674015938147487124964957748809]
Xa2 = [1255781502869825318476508362901887632634175705712511381033843655323566013467222775,11894887541164430437228535255768040560751904970466665395837494984247775660891496]
Xa3 = [1067891655752798710112377524426562951786815203258698724947689171055313332972385466,1608052613112492086359471153255856975523028801009323950208192693945046175520760724] 
Xa4 = [1470909315788359119619574613890126408310092903383346564580820788118323470133666306,74130145004558732599758927390403510870170508894559819534972682609868427859150390]

Xb1 = [1547024401827849459997561220900853778293095627006497580139468873256841077333207349,1507358952715447995763681105358632367690502218400315088068563387456832315380404758]
Xb2 = [1712712167223362338798915755882479058252898449645751403193689646425110848610296657,383202489045889715667864392819241352990214764621614468192490434043615236110899097]
Xb3 = [324475563012823186557739763209035920352411311006423715178713186365317528133567061,78062925228326099204061989336794468732471277844490196128328737904444250653944587]
Xb4 = [779070176815498219956221784474436138718548799957971372410073747955554866335309154,929355614185330304745688847106583659507575446276989147992156019180763440084562125] 
Xlist1 = [Xa1[0],Xa2[0],Xa3[0],Xa4[0]]
Xlist2 = [Xb1[0],Xb2[0],Xb3[0],Xb4[0]]

#print(factor(R))
# 34518675486327458167245817632458127645341 * 54197654187654687123548612541823647512843
p = 34518675486327458167245817632458127645341
q = 54197654187654687123548612541823647512843


pout = lcm(p-1,p+1)
qout = lcm(q-1,q+1)
gR = lcm(pout,qout)

ma = 1/na % gR
mb = 1/nb % gR

print(ma)
print(mb)

Message = []
for i in range(4):
    E1 = (Xlist1[i]^2-4) % R
    pointdecryption1 = [Xlist1[i],1]
    lucgpdecryption1 = [E1,R]
    decryptedPoint1 = LUCexp(pointdecryption1,ma,lucgpdecryption1)
    Message.append(ASCIIDepad(decryptedPoint1[0]))

print(''.join(map(str, Message)))

Message = []
for i in range(4):
    E1 = (Xlist2[i]^2-4) % R
    pointdecryption1 = [Xlist2[i],1]
    lucgpdecryption1 = [E1,R]
    decryptedPoint1 = LUCexp(pointdecryption1,mb,lucgpdecryption1)
    Message.append(ASCIIDepad(decryptedPoint1[0]))

print(''.join(map(str, Message)))

#D = ModSolver(Xa1[1]^2,Xa1[0]^2-4,R)
#print(D)
#print(IsIn(Xa1,[D,R]))
#group = [D,R]
#inversepoint = LUCInverse(Xa1,group)
#point = inversepoint
#print(inversepoint)
#for i in range(72):
#    point = LUCTimes(point,inversepoint,group)
#    print(point)


